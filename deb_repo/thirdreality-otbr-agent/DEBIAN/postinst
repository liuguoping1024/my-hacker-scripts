#!/bin/bash
set -e

INFRA_IF_NAME="wlan0"
readonly INFRA_IF_NAME

SYSCTL_ACCEPT_RA_FILE="/etc/sysctl.d/60-otbr-accept-ra.conf"
readonly SYSCTL_ACCEPT_RA_FILE

SYSCTL_IP_FORWARD_FILE="/etc/sysctl.d/60-otbr-ip-forward.conf"
readonly SYSCTL_IP_FORWARD_FILE

accept_ra_enable()
{
    echo 2 | tee /proc/sys/net/ipv6/conf/"${INFRA_IF_NAME}"/accept_ra || die 'Failed to enable IPv6 RA!'
    echo 64 | tee /proc/sys/net/ipv6/conf/"${INFRA_IF_NAME}"/accept_ra_rt_info_max_plen || die 'Failed to enable IPv6 RIO!'
}

ipforward_enable()
{
    echo 1 | tee /proc/sys/net/ipv6/conf/all/forwarding || die 'Failed to enable IPv6 forwarding!'
    echo 1 | tee /proc/sys/net/ipv4/ip_forward || die 'Failed to enable IPv4 forwarding!'
}

#/etc/sysctl.conf
#/etc/iproute2/rt_tables
rt_tables_install()
{
    sed -i.bak '/88\s\+openthread/d' /etc/iproute2/rt_tables

    echo "88 openthread" >>/etc/iproute2/rt_tables

    echo "" >>/etc/sysctl.conf
    echo "# OpenThread configuration" >>/etc/sysctl.conf
    echo "net.core.optmem_max=65536" >>/etc/sysctl.conf
    sysctl -p /etc/sysctl.conf
}

add_open_thread_entry_to_config() {
	echo "Checking if Thread Border Router API is available..."
	local max_attempts=5
	local attempt=1
	local success=false

	while [ $attempt -le $max_attempts ] && [ "$success" = "false" ]; do
		echo "Attempt $attempt of $max_attempts"
		
		# Check if the Thread Border Router API returns data
		response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/node 2>/dev/null)
		
		if [ "$response" = "200" ]; then
			echo "Thread Border Router API is available and returning data"
			/usr/lib/thirdreality/otbr_database || true
			success=true
		elif [ "$response" = "204" ]; then
			echo "Thread Border Router API is available but no data returned"
			/usr/lib/thirdreality/otbr_database || true
			success=true
		else
			echo "Thread Border Router API not available (HTTP code: $response), waiting..."
			sleep 1
			attempt=$((attempt + 1))
		fi
	done

	if [ "$success" = "false" ]; then
		echo "Failed to connect to Thread Border Router API after $max_attempts attempts"
		return 1
	fi
}

# 检查是安装还是升级
if [ "$1" = "configure" ]; then
	
	mkdir -p /var/lib/thread

	if [ -f "/usr/lib/libdns_sd.so.1" ]; then
		ln -s -f /usr/lib/libdns_sd.so.1 /usr/lib/libdns_sd.so
	fi 
	
	if [ -f "/lib/libnss_mdns-0.2.so" ]	; then
		chmod 444 /lib/libnss_mdns-0.2.so
		ln -s -f /lib/libnss_mdns-0.2.so /lib/libnss_mdns.so.2
	fi

	if [ -f "/etc/init.d/mdns" ]; then
		chmod ugo+x /etc/init.d/mdns
		ln -s -f /etc/init.d/mdns /etc/rc2.d/S52mdns
		ln -s -f /etc/init.d/mdns /etc/rc3.d/S52mdns
		ln -s -f /etc/init.d/mdns /etc/rc4.d/S52mdns
		ln -s -f /etc/init.d/mdns /etc/rc5.d/S52mdns
		ln -s -f /etc/init.d/mdns /etc/rc0.d/K16mdns
		ln -s -f /etc/init.d/mdns /etc/rc6.d/K16mdns
	fi

	if [ -f "/etc/nss_mdns.conf" ]; then
		chmod 444 /etc/nss_mdns.conf
	fi
	
	if [ -f "/etc/init.d/otbr-firewall" ]; then
		chmod a+x /etc/init.d/otbr-firewall
		/usr/bin/systemctl enable otbr-firewall
		/usr/bin/systemctl start otbr-firewall
	fi

	# accept_ra_install
    accept_ra_enable

	# ipforward_install
    ipforward_enable

	rt_tables_install

	chmod +x /usr/lib/thirdreality/hubv3-otbr-agent.sh
	chmod +x /usr/lib/thirdreality/otbr_database

	/usr/bin/systemctl enable hubv3-otbr-agent.service
	/usr/bin/systemctl disable otbr-agent || true
	/usr/bin/systemctl reload dbus
	/usr/bin/systemctl daemon-reload

	# 检查 GPIO pin 0, 27 的状态
    if gpioget 0 27; then
		echo "Info: Thread Device is found."

		msg=$(iw dev wlan0 link 2>&1)
		/usr/bin/systemctl start otbr-agent || true
		
		if [ -e "/usr/local/bin/supervisor" ]; then
			/usr/local/bin/supervisor thread enable
		fi

		# 如果Home Assistant正在运行，需要停止服务，然后更新配置，再恢复服务
		if [[ "$(/usr/bin/systemctl is-active home-assistant.service)" == "active" ]]; then
			echo "Stopping home-assistant.service"
			/usr/bin/systemctl stop home-assistant.service

			sync
			add_open_thread_entry_to_config
			sync

			echo "Restore home-assistant.service"
			/usr/bin/systemctl start home-assistant.service
		else
			echo "Skipping home-assistant.service"
			add_open_thread_entry_to_config
			sync
		fi		
    else
		echo "Warning: Thread Device is not found !!!"
        /usr/bin/systemctl stop otbr-agent || true
    fi

	echo "Success"
fi

