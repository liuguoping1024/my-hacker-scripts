#!/srv/homeassistant/bin/python3
# -*- coding: utf-8 -*-

import aiohttp
import asyncio
import json
import os
from http import HTTPStatus
from datetime import datetime
import uuid

class OTBRError(Exception):
    pass

class GetBorderAgentIdNotSupportedError(OTBRError):
    pass

class OTBR:
    def __init__(self, url: str, session: aiohttp.ClientSession, timeout: int = 10) -> None:
        self._session = session
        self._url = url
        self._timeout = timeout

    async def get_active_dataset_tlvs(self) -> bytes | None:
        response = await self._session.get(
            f"{self._url}/node/dataset/active",
            headers={"Accept": "text/plain"},
            timeout=aiohttp.ClientTimeout(total=self._timeout),
        )

        if response.status == HTTPStatus.NO_CONTENT:
            return None

        if response.status != HTTPStatus.OK:
            raise OTBRError(f"unexpected http status {response.status}")

        try:
            return bytes.fromhex(await response.text("ASCII"))
        except ValueError as exc:
            raise OTBRError("unexpected API response") from exc

    async def get_border_agent_id(self) -> bytes:
        """Get the border agent ID."""
        response = await self._session.get(
            f"{self._url}/node/ba-id",
            timeout=aiohttp.ClientTimeout(total=self._timeout),
        )

        if response.status == HTTPStatus.NOT_FOUND:
            raise GetBorderAgentIdNotSupportedError

        if response.status != HTTPStatus.OK:
            raise OTBRError(f"unexpected http status {response.status}")

        try:
            return bytes.fromhex(await response.json())
        except ValueError as exc:
            raise OTBRError("unexpected API response") from exc

    async def get_extended_address(self) -> bytes:
        """Get extended address (EUI-64).

        Raises if the http status is not 200 or if the response is invalid.
        """
        response = await self._session.get(
            f"{self._url}/node/ext-address",
            headers={"Accept": "application/json"},
            timeout=aiohttp.ClientTimeout(total=self._timeout),
        )

        if response.status != HTTPStatus.OK:
            raise OTBRError(f"unexpected http status {response.status}")

        try:
            return bytes.fromhex(await response.json())
        except ValueError as exc:
            raise OTBRError("unexpected API response") from exc

async def update_thread_core_config(self, border_agent_id) -> int:
    """/var/lib/homeassistant/homeassistant/.storage/core.config_entries"""
    try:
        file_path = "/var/lib/homeassistant/homeassistant/.storage/core.config_entries"
        
        # 检查文件是否存在
        if not os.path.exists(file_path):
            print("core.config_entries file does not exist, ignoring...")
            return 0  # 忽略
        else:
            # 读取现有文件
            with open(file_path, 'r') as file:
                config_data = json.load(file)
        
        # 检查是否已存在otbr域
        otbr_exists = False
        thread_exists = False
        
        for entry in config_data["data"]["entries"]:
            if entry.get("domain") == "otbr":
                otbr_exists = True
            if entry.get("domain") == "thread":
                thread_exists = True
        
        print("Checking core.config_entries:", otbr_exists, thread_exists)

        # 如果不存在otbr域，添加它
        if not otbr_exists:
            otbr_entry = {
                "created_at": datetime.utcnow().isoformat() + "+00:00",
                "data": {
                    "url": "http://localhost:8081"
                },
                "disabled_by": None,
                "discovery_keys": {},
                "domain": "otbr",
                "entry_id": str(uuid.uuid4()).replace("-", "")[:25],
                "minor_version": 1,
                "modified_at": datetime.utcnow().isoformat() + "+00:00",
                "options": {},
                "pref_disable_new_entities": False,
                "pref_disable_polling": False,
                "source": "user",
                "subentries": [],
                "title": "Open Thread Border Router",
                "unique_id": border_agent_id.hex(),
                "version": 1
            }
            config_data["data"]["entries"].append(otbr_entry)
        
        # 如果不存在thread域，添加它
        if not thread_exists:
            thread_entry = {
                "created_at": datetime.utcnow().isoformat() + "+00:00",
                "data": {},
                "disabled_by": None,
                "discovery_keys": {
                    "zeroconf": [
                        {
                            "domain": "zeroconf",
                            "key": [],
                            "version": 1
                        }
                    ]
                },
                "domain": "thread",
                "entry_id": str(uuid.uuid4()).replace("-", "")[:25],
                "minor_version": 1,
                "modified_at": datetime.utcnow().isoformat() + "+00:00",
                "options": {},
                "pref_disable_new_entities": False,
                "pref_disable_polling": False,
                "source": "zeroconf",
                "subentries": [],
                "title": "Thread",
                "unique_id": None,
                "version": 1
            }
            config_data["data"]["entries"].append(thread_entry)
        
        # 写入文件
        with open(file_path, 'w') as file:
            json.dump(config_data, file, indent=2)
        
        return 0  # 成功
    except Exception as e:
        print(f"Failed to update thread core config: {e}")
        return -1  # 失败

async def update_thread_database(self, border_agent_id, extended_address, active_dataset) -> int:
    """/var/lib/homeassistant/homeassistant/.storage/thread.datasets"""
    try:
        file_path = "/var/lib/homeassistant/homeassistant/.storage/thread.datasets"
        
        # 检查文件是否存在且包含preferred_border_agent_id
        if os.path.exists(file_path):
            with open(file_path, 'r') as file:
                try:
                    data = json.load(file)
                    if "data" in data and "datasets" in data["data"]:
                        for dataset in data["data"]["datasets"]:
                            if "preferred_border_agent_id" in dataset:
                                print("preferred_border_agent_id already exists, no changes needed")
                                return 0
                except json.JSONDecodeError:
                    # File exists but is not valid JSON, will be replaced
                    pass
        
        # 创建新的UUID用于dataset ID
        dataset_id = str(uuid.uuid4()).replace("-", "")[:25]
        
        # 创建新的数据结构
        thread_data = {
            "version": 1,
            "minor_version": 4,
            "key": "thread.datasets",
            "data": {
                "datasets": [
                    {
                        "created": datetime.utcnow().isoformat() + "+00:00",
                        "id": dataset_id,
                        "preferred_border_agent_id": border_agent_id.hex(),
                        "preferred_extended_address": extended_address.hex(),
                        "source": "otbr",
                        "tlv": active_dataset.hex() if active_dataset else ""
                    }
                ],
                "preferred_dataset": dataset_id
            }
        }
        
        # 写入文件
        with open(file_path, 'w') as file:
            json.dump(thread_data, file, indent=2)
        
        return 0  # 成功
    except Exception as e:
        print(f"Failed to update thread database: {e}")
        return -1  # 失败

async def main():
    async with aiohttp.ClientSession() as session:
        otbr_address = "http://localhost:8081"
        print("otbr_address:", otbr_address)
        api = OTBR(otbr_address, session, 10)

        try:
            border_agent_id = await api.get_border_agent_id()
            active_dataset = await api.get_active_dataset_tlvs()
            extended_address = await api.get_extended_address()

            if active_dataset is None:
                print("No active operation dataset.")
            else:
                print("Current active dataset:", active_dataset.hex())
                print("Current border agent ID:", border_agent_id.hex())
                print("Current extended address:", extended_address.hex())
                
                # Update configuration files
                core_config_result = await update_thread_core_config(api, border_agent_id)
                database_result = await update_thread_database(api, border_agent_id, extended_address, active_dataset)
                
                print(f"Update thread core config result: {'Success' if core_config_result == 0 else 'Failed'}") 
                print(f"Update thread database result: {'Success' if database_result == 0 else 'Failed'}")
                
        except OTBRError as e:
            print(f"OTBR error: {e}")
        except GetBorderAgentIdNotSupportedError:
            print("Getting border agent ID is not supported.")
        except aiohttp.ClientError as e:
            print(f"Network error: {e}")
        except asyncio.TimeoutError:
            print("Request timeout.")
        except Exception as e:
            print(f"An error occurred: {e}")

# 运行异步main函数
asyncio.run(main())

